import { c, d, b } from './chunk-VO7VPLVP.js';
import { useEffectAsync, useMemoAsync } from '@chengsokdara/react-hooks-async';
import { useRef, useState, useEffect } from 'react';
import { createFFmpeg } from '@ffmpeg/ffmpeg';

var me={apiKey:"",autoStart:!1,autoTranscribe:!0,mode:"transcriptions",nonStop:!1,removeSilence:!1,stopTimeout:5e3,streaming:!1,timeSlice:1e3,onDataAvailable:void 0,onTranscribe:void 0,ffmpegCoreURL:b},ge={stop:void 0},be={blob:void 0,text:void 0},Re=z=>{let{apiKey:w,autoStart:U,autoTranscribe:A,mode:T,nonStop:x,removeSilence:N,stopTimeout:G,streaming:l,timeSlice:J,whisperConfig:u,onDataAvailable:Q,onTranscribe:m,ffmpegCoreURL:V}={...me,...z};if(!w&&!m)throw new Error("apiKey is required if onTranscribe is not provided");let g=useRef([]),i=useRef(),s=useRef(),t=useRef(),a=useRef(),b=useRef(ge),[X,R]=useState(!1),[Y,B]=useState(!1),[Z,p]=useState(!1),[W,y]=useState(be),[ee,E]=useState(!1),D=useRef(),[k,F]=useState(!1),H=async()=>{let e=createFFmpeg({mainName:"main",corePath:V,log:!0});D.current=e,e.isLoaded()||await e.load(),F(!0);};useEffect(()=>()=>{g.current&&(g.current=[]),i.current&&(i.current.flush(),i.current=void 0),t.current&&(t.current.destroy(),t.current=void 0),h("stop"),s.current&&(s.current.off("speaking",C),s.current.off("stopped_speaking",v)),a.current&&(a.current.getTracks().forEach(e=>e.stop()),a.current=void 0);},[]),useEffectAsync(async()=>{U&&await L();},[U]);let re=async()=>{await L();},te=async()=>{await se();},ne=async()=>{await P();},oe=async()=>{await M();},ae=()=>{E(!1);},L=async()=>{try{if(!k&&!l&&H(),a.current||await ie(),!i.current){let{Mp3Encoder:e}=await import('lamejs');i.current=new e(1,44100,96);}if(a.current){if(!t.current){let{default:{RecordRTCPromisesHandler:r,StereoAudioRecorder:o}}=await import('recordrtc'),n={mimeType:"audio/wav",numberOfAudioChannels:1,recorderType:o,sampleRate:44100,timeSlice:l?J:void 0,type:"audio",ondataavailable:A&&l?ue:void 0};t.current=new r(a.current,n);}let e=await t.current.getState();(e==="inactive"||e==="stopped")&&await t.current.startRecording(),e==="paused"&&await t.current.resumeRecording(),x&&_("stop"),R(!0);}}catch{}},ie=async()=>{try{if(a.current&&a.current.getTracks().forEach(e=>e.stop()),a.current=await navigator.mediaDevices.getUserMedia({audio:!0}),!s.current){let{default:e}=await import('hark');s.current=e(a.current,{interval:100,play:!1}),s.current.on("speaking",C),s.current.on("stopped_speaking",v);}}catch{}},_=e=>{b.current[e]||(b.current[e]=setTimeout(P,G));},C=()=>{B(!0),h("stop");},v=()=>{B(!1),x&&_("stop");},se=async()=>{try{t.current&&(await t.current.getState()==="recording"&&await t.current.pauseRecording(),h("stop"),R(!1));}catch{}},P=async()=>{try{if(t.current){let e=await t.current.getState();if((e==="recording"||e==="paused")&&await t.current.stopRecording(),ce(),h("stop"),R(!1),A)await M();else {let r=await t.current.getBlob();y({blob:r});}await t.current.destroy(),g.current=[],i.current&&(i.current.flush(),i.current=void 0),t.current=void 0;}}catch{}},ce=()=>{s.current&&(s.current.off("speaking",C),s.current.off("stopped_speaking",v),s.current=void 0),a.current&&(a.current.getTracks().forEach(e=>e.stop()),a.current=void 0);},h=e=>{b.current[e]&&(clearTimeout(b.current[e]),b.current[e]=void 0);},I=async e=>{let r;if(typeof m=="function"){let{text:o}=await m(e);r=o;}else {let o=new File([e],"speech.mp3",{type:"audio/mpeg"});r=await q(o);}y({blob:e,text:r}),E(r===void 0);},M=async()=>{try{if(!k&&l&&H(),i.current&&t.current){if(await t.current.getState()==="stopped"){p(!0);let r=await t.current.getBlob();if(N&&k){let o=await r.arrayBuffer(),n=D.current;if(n){n.FS("writeFile","in.wav",new Uint8Array(o)),await n.run("-i","in.wav","-acodec","libmp3lame","-b:a","96k","-ar","44100","-af",c,"out.mp3");let S=n.FS("readFile","out.mp3");if(S.length<=358){n.exit(),F(!1),y({blob:r}),p(!1);return}r=new Blob([S.buffer],{type:"audio/mpeg"}),n.exit(),F(!1);}}else {let o=await r.arrayBuffer(),n=i.current.encodeBuffer(new Int16Array(o));r=new Blob([n],{type:"audio/mpeg"});}await I(r),p(!1);}}else {let{blob:e}=W;e&&(p(!0),await I(e),p(!1));}}catch{p(!1);}},ue=async e=>{try{if(l&&t.current){if(Q?.(e),i.current){let o=await e.arrayBuffer(),n=i.current.encodeBuffer(new Int16Array(o)),c=new Blob([n],{type:"audio/mpeg"});g.current.push(c);}if(await t.current.getState()==="recording"){let o=new Blob(g.current,{type:"audio/mpeg"}),n;if(typeof m=="function"){let{text:c}=await m(o);n=c;}else {let c=new File([o],"speech.mp3",{type:"audio/mpeg"});n=await q(c);}n&&y(c=>({...c,text:n}));}}}catch{}},q=useMemoAsync(async e=>{let r=new FormData;r.append("file",e),r.append("model","whisper-1"),T==="transcriptions"&&r.append("language",u?.language??"en"),u?.prompt&&r.append("prompt",u.prompt),u?.response_format&&r.append("response_format",u.response_format),u?.temperature&&r.append("temperature",`${u.temperature}`);let o={};o["Content-Type"]="multipart/form-data",w&&(o.Authorization=`Bearer ${w}`);let{default:n}=await import('axios'),{default:c}=await import('axios-retry');c(n,{retries:3,retryDelay:c.exponentialDelay});try{return (await n.post(d+T,r,{headers:o})).data.text}catch{return}},[w,T,u]);return {recording:X,speaking:Y,transcribing:Z,transcript:W,isTranscribingError:ee,pauseRecording:te,startRecording:re,stopRecording:ne,startTranscribing:oe,clearTranscribingError:ae}};

export { Re as a };
